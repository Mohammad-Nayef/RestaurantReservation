using Microsoft.EntityFrameworkCore;
using RestaurantReservation.Db;
using RestaurantReservation.Db.Models;
using RestaurantReservation.Db.Services;

using var context = new RestaurantReservationDbContext();

Console.WriteLine("Restaurant Reservation System");
Console.WriteLine("This console app is for testing purposes (8th requirement).");

Console.WriteLine("\nRequirement 10. a: All employees who hold the position of \"Manager\":");
var employeeService = new EmployeeService(context);
var managers = await employeeService.ListManagersAsync();
managers.ForEach(m => Console.WriteLine(m));

Console.WriteLine("\n-----------------------------------------\n");

Console.WriteLine("Requirement 10. b: Returns a list of reservations made by a particular customer:");
Console.WriteLine("Reservations made by customer with Id = 5:");
var reservationService = new ReservationService(context);
var reservations = await reservationService.GetReservationsByCustomerAsync(5);
reservations.ForEach(r => Console.WriteLine(r));

Console.WriteLine("\n-----------------------------------------\n");

Console.WriteLine("Requirement 10. c: List the orders placed on a specific reservation " +
    "along with the associated menu items:");
Console.WriteLine("Orders with menu items of reservation with id = 3:");
var orderService = new OrderService(context);
var orders = await orderService.ListOrdersAndMenuItemsAsync(3);

foreach (var order in orders)
{
    Console.WriteLine($"Order: {order}");

    foreach (var orderItem in order.OrderItems)
    {
        Console.WriteLine($"MenuItem: {orderItem.MenuItem}");
    }

    Console.WriteLine();
}

Console.WriteLine("\n-----------------------------------------\n");

Console.WriteLine("Requirement 10. d: Menu items ordered in a specific reservation:");
Console.WriteLine("Menu items of the reservation with Id = 1:");
var menuItemService = new MenuItemService(context);
var items = await menuItemService.ListOrderedMenuItemsAsync(1);
items.ForEach(m => Console.WriteLine(m));

Console.WriteLine("\n-----------------------------------------\n");

Console.WriteLine("Requirement 10. e: Calculate the average order amount for a specific employee:");
Console.WriteLine("Average order amount of the employee with Id = 1:");
var avgAmount = await orderService.CalculateAverageOrderAmountAsync(1);
Console.WriteLine(avgAmount);
Console.WriteLine("\nAverage order amount of the employee with Id = 2:");
avgAmount = await orderService.CalculateAverageOrderAmountAsync(2);
Console.WriteLine(avgAmount);

Console.WriteLine("\n-----------------------------------------\n");

Console.WriteLine("Requirement 11: Database view that lists all the reservations with their " +
    "associated customer and restaurant information:\n");
var reservationsWithInfo = await context.ReservationsWithCustomerAndRestaurant.ToListAsync();
reservationsWithInfo.ForEach(r => Console.WriteLine(r + "\n"));

Console.WriteLine("\n-----------------------------------------\n");

Console.WriteLine("Requirement 12: Create a database function to Calculate the total revenue " +
    "generated by a specific restaurant:");
Console.WriteLine("The total revenue generated by the restaurant with Id = 1:");
var restaurantService = new RestaurantService(context);
Console.WriteLine(await restaurantService.TotalRevenueAsync(1));

Console.WriteLine("\n-----------------------------------------\n");

Console.WriteLine("Requirement 13: Design a stored procedure for Finding all customers " +
    "who have made reservations with a party size greater than a certain value");
Console.WriteLine("all customers who have made reservations with a party size greater than 2:");
var customerService= new CustomerService(context);
var customers = await customerService.GetCustomersWithPartySizeGreaterThanValueAsync(2);
customers.ForEach(c => Console.WriteLine(c));

Console.WriteLine("\n-----------------------------------------\n");
await CustomerTesting(context);

async Task CustomerTesting(RestaurantReservationDbContext context)
{
    var service = new CustomerService(context);
    Console.WriteLine("Requirement 9: Customers CRUD operations testing:");
    Console.WriteLine("Note: I provided samples for customers only because all other entities " +
        "have literally the same CRUD methods. I implemented CRUD for one class and " +
        "copy-pasted for the rest because they are identical.");
    Console.WriteLine("\nAll of the customers:");
    var custs = await service.GetAllAsync();
    custs.ForEach(c => Console.WriteLine(c));

    var id = await service.CreateAsync(new CustomerDTO
    {
        FirstName = "Ahmad",
        LastName = "Obaida",
        Email = "ooooo@oooo.com",
        PhoneNumber = "1234567890"
    });

    Console.WriteLine($"\nCreated a new customer with Id = {id}.\n");
    Console.WriteLine("All of the customers:");
    custs = await service.GetAllAsync();
    custs.ForEach(c => Console.WriteLine(c));

    var cust = await service.GetAsync(1);
    cust.FirstName = "Updated";
    cust.LastName = "Name";
    await service.UpdateAsync(cust);

    Console.WriteLine("\nUpdated customer name with Id = 1.\n");
    Console.WriteLine("All of the customers:");
    custs = await service.GetAllAsync();
    custs.ForEach(c => Console.WriteLine(c));

    cust.FirstName = "Ali";
    cust.LastName = "Ahmad";
    await service.UpdateAsync(cust);

    await service.DeleteAsync(id);
    Console.WriteLine($"\nDeleted customer with Id = {id}.\n");
    Console.WriteLine("All of the customers:");
    custs = await service.GetAllAsync();
    custs.ForEach(c => Console.WriteLine(c));
}